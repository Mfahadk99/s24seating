<!doctype html>
<html class="loading" lang="en" data-textdirection="ltr">
<!-- BEGIN: Head-->

<head>
    <!-- head partial -->
    <%- include('../partials/head.ejs') %>
    <!-- styles partial -->
    <%- include('../partials/styles.ejs') %>
    <!-- reservations css -->
    <link rel="stylesheet" type="text/css" href="/public/css/reservations/reservations.css">
    <!-- availability css -->
    <link rel="stylesheet" type="text/css" href="/public/css/availability/availability.css">
</head>
<!-- END: Head-->

<!-- BEGIN: Body-->

<body class="vertical-layout vertical-content-menu 2-columns fixed-navbar" data-open="click"
    data-menu="vertical-content-menu" data-col="2-columns">

    <!-- top-menu partial -->
    <!-- <%- include('../partials/top-menu.ejs') %> -->

        <!-- BEGIN: Content-->
        <div class="app-content content">
            <div class="content-wrapper">
                <!-- main-menu partial -->
                <!-- <%- include('../partials/main-menu.ejs') %> -->

                <!-- Main Layout -->
                <div class="content-body"> <!-- reservations-layout -->
                    <div class="app-container">
                        <!-- Date Header -->
                        <div class="date-header">
                            <div class="date-navigation">
                                <button class="date-nav-btn" id="prev-date" title="Previous Day">
                                    <i class="la la-angle-left"></i>
                                </button>

                                <div class="date-display">
                                    <div class="current-date" id="current-date" title="Click to select date">
                                        <%= new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric',
                                            month: 'long', day: 'numeric' }) %>
                                    </div>
                                </div>

                                <button class="date-nav-btn" id="next-date" title="Next Day">
                                    <i class="la la-angle-right"></i>
                                </button>
                            </div>

                            <!-- Hidden date picker -->
                            <input type="date" id="date-picker" class="date-picker-input"
                                value="<%= new Date().toISOString().split('T')[0] %>">
                        </div>

                        <!-- Main Content -->
                        <div class="main-content">
                            <!-- Left Panel -->
                            <div class="left-panel">
                                <!-- Section: Table Reservations -->
                                <div class="panel-section">
                                    <div class="panel-header">
                                        <div class="panel-header-content">
                                            <h2>Reservations</h2>
                                            <p class="subtitle">Manage your restaurant seating</p>
                                        </div>
                                        <button class="section-toggle-btn" data-section="reservations" title="Expand/Collapse Section">
                                            <i class="la la-angle-up"></i>
                                        </button>
                                        <button class="filter-toggle-btn" id="filter-toggle" title="Filter Options">
                                            <i class="la la-filter"></i>
                                            <span class="filter-badge" id="filter-badge">1</span>
                                        </button>
                                    </div>

                                    <div class="section-content" id="reservations-section">
                                        <!-- Filters -->
                                        <div class="filter-section" id="filter-section">
                                            <div class="filter-group">
                                                <label for="filter-status">Status</label>
                                                <select id="filter-status">
                                                    <option value="">All Tables</option>
                                                    <option value="available">Available</option>
                                                    <option value="reserved">Reserved</option>
                                                </select>
                                            </div>
                                            <div class="filter-group">
                                                <label for="filter-type">Table Type</label>
                                                <select id="filter-type">
                                                    <option value="">All Types</option>
                                                    <option value="round">Round</option>
                                                    <option value="square">Square</option>
                                                    <option value="rectangular">Rectangular</option>
                                                    <option value="hexagon">Hexagon</option>
                                                    <option value="bar">Bar</option>
                                                </select>
                                            </div>
                                            <div class="filter-group">
                                                <label for="filter-seats">Minimum Seats</label>
                                                <select id="filter-seats">
                                                    <option value="">Any</option>
                                                    <option value="2">2+</option>
                                                    <option value="4">4+</option>
                                                    <option value="6">6+</option>
                                                    <option value="8">8+</option>
                                                </select>
                                            </div>
                                            <div class="filter-actions">
                                                <button class="filter-action-btn filter-reset" id="filter-reset">Reset</button>
                                                <button class="filter-action-btn filter-apply" id="filter-apply">Apply
                                                    Filters</button>
                                            </div>
                                        </div>

                                        <!-- Search Box -->
                                        <div class="search-box">
                                            <input type="text" id="filter-search" class="search-input"
                                                placeholder="Search tables or customers...">
                                        </div>

                                        <!-- Table List -->
                                        <div class="table-list" id="table-list">
                                            <% if (!reservations || reservations.length===0) { %>
                                                <div class="no-data">
                                                    <i class="la la-calendar-times-o"></i>
                                                    <h4>No Reservations Found</h4>
                                                    <p>No reservations available for the selected date.</p>
                                                </div>
                                            <% } else { %>
                                                <!-- Reservation List Header -->
                                                <div class="reservation-list-header">
                                                    <div class="reservation-row header">
                                                        <div class="col table-name">Table</div>
                                                        <div class="col seats">Seats</div>
                                                        <div class="col time">Time</div>
                                                        <div class="col customer">Customer</div>
                                                    </div>
                                                </div>

                                                <!-- Reservation List Body -->
                                                <div class="reservation-list-body">
                                                    <% reservations.forEach(reservation => { %>
                                                        <div class="reservation-row" 
                                                            data-table-id="<%= reservation.tableId ? reservation.tableId._id : '' %>"
                                                            data-reservation-id="<%= reservation._id %>">
                                                            <div class="col table-name">
                                                                <%= reservation.tableId ? (reservation.tableId.name || reservation.tableId.tableId) : 'Unknown Table' %>
                                                            </div>
                                                            <div class="col seats">
                                                                <%= reservation.tableId ? reservation.tableId.seats : 'N/A' %>
                                                            </div>
                                                            <div class="col time">
                                                                <%= new Date(reservation.startTime).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %> - 
                                                                <%= new Date(reservation.endTime).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                                                            </div>
                                                            <div class="col customer">
                                                                <%= reservation.metadata && reservation.metadata.name ? reservation.metadata.name : 'Guest' %>
                                                            </div>
                                                        </div>
                                                    <% }); %>
                                                </div>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>

                                <!-- Section: Seated -->
                                <div class="panel-section">
                                    <div class="panel-header">
                                        <div class="panel-header-content">
                                            <h2>Seated</h2>
                                            <p class="subtitle">Currently seated guests</p>
                                        </div>
                                        <button class="section-toggle-btn" data-section="seated" title="Expand/Collapse Section">
                                            <i class="la la-angle-down"></i>
                                        </button>
                                    </div>
                                    <div class="section-content" id="seated-section">
                                        <div class="table-list" id="seated-list">
                                            <div class="no-data">
                                                <i class="la la-chair"></i>
                                                <h4>No Seated Guests</h4>
                                                <p>No guests are currently seated.</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Section: Waitlists -->
                                <div class="panel-section">
                                    <div class="panel-header">
                                        <div class="panel-header-content">
                                            <h2>Waitlists</h2>
                                            <p class="subtitle">Guests waiting for tables</p>
                                        </div>
                                        <button class="section-toggle-btn" data-section="waitlists" title="Expand/Collapse Section">
                                            <i class="la la-angle-down"></i>
                                        </button>
                                    </div>
                                    <div class="section-content" id="waitlists-section">
                                        <div class="table-list" id="waitlist-list">
                                            <div class="no-data">
                                                <i class="la la-clock"></i>
                                                <h4>No Waitlisted Guests</h4>
                                                <p>No guests are currently on the waitlist.</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Section: Servers -->
                                <div class="panel-section">
                                    <div class="panel-header">
                                        <div class="panel-header-content">
                                            <h2>Servers</h2>
                                            <p class="subtitle">Server assignments and status</p>
                                        </div>
                                        <button class="section-toggle-btn" data-section="servers" title="Expand/Collapse Section">
                                            <i class="la la-angle-down"></i>
                                        </button>
                                    </div>
                                    <div class="section-content" id="servers-section">
                                        <div class="table-list" id="servers-list">
                                            <div class="no-data">
                                                <i class="la la-user"></i>
                                                <h4>No Active Servers</h4>
                                                <p>No servers are currently assigned.</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Section: Finished -->
                                <div class="panel-section">
                                    <div class="panel-header">
                                        <div class="panel-header-content">
                                            <h2>Finished</h2>
                                            <p class="subtitle">Completed reservations</p>
                                        </div>
                                        <button class="section-toggle-btn" data-section="finished" title="Expand/Collapse Section">
                                            <i class="la la-angle-down"></i>
                                        </button>
                                    </div>
                                    <div class="section-content" id="finished-section">
                                        <div class="table-list" id="finished-list">
                                            <div class="no-data">
                                                <i class="la la-check-circle"></i>
                                                <h4>No Finished Reservations</h4>
                                                <p>No reservations have been completed today.</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Section: Removed -->
                                <div class="panel-section">
                                    <div class="panel-header">
                                        <div class="panel-header-content">
                                            <h2>Removed</h2>
                                            <p class="subtitle">Cancelled or no-show reservations</p>
                                        </div>
                                        <button class="section-toggle-btn" data-section="removed" title="Expand/Collapse Section">
                                            <i class="la la-angle-down"></i>
                                        </button>
                                    </div>
                                    <div class="section-content" id="removed-section">
                                        <div class="table-list" id="removed-list">
                                            <div class="no-data">
                                                <i class="la la-times-circle"></i>
                                                <h4>No Removed Reservations</h4>
                                                <p>No reservations have been cancelled today.</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Right Panel - Canvas (Using availability.ejs canvas design) -->
                            <div class="right-panel">
                                <!-- Canvas Toolbar -->
                                <div class="ap-toolbar">
                                    <div class="ap-toolbar-left">
                                        <span style="font-weight: 600; font-size: 16px;">Floor plan</span>
                                        <select class="floor-selector" id="floorPlanSelector">
                                            <option value="" disabled selected>Loading floor plans...</option>
                                        </select>
                                    </div>
                                    <div class="ap-toolbar-right">
                                        <button class="ap-toolbar-btn" id="zoomInBtn" title="Zoom in" aria-label="Zoom in">🔍+</button>
                                        <button class="ap-toolbar-btn" id="zoomOutBtn" title="Zoom out" aria-label="Zoom out">🔍-</button>
                                        <button class="ap-toolbar-btn" id="fullscreenBtn" title="Toggle fullscreen" aria-label="Toggle fullscreen">
                                            <span class="fullscreen-icon">⛶</span>
                                        </button>
                                    </div>
                                </div>

                                <!-- Canvas Container -->
                                <div class="ap-canvas-container">
                                    <div class="ap-canvas" id="ap-canvas" tabindex="0" role="application" aria-label="Floor plan canvas">
                                        <div class="ap-canvas-content" id="ap-canvasContent">
                                            <% if (!reservations || reservations.length===0) { %>
                                                <div class="no-data">
                                                    <i class="la la-table"></i>
                                                    <h4>No Tables to Display</h4>
                                                    <p>No table layout available for the current reservations.</p>
                                                </div>
                                            <% } else { %>
                                                <div class="ap-drop-zone" id="ap-dropZone">
                                                    <div class="ap-drop-message">Drop table here to add to floor plan</div>
                                                </div>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- END: Content-->

        <!-- Table Details Modal -->
        <div class="modal fade" id="tableDetailsModal" tabindex="-1" role="dialog" aria-labelledby="tableDetailsModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="tableDetailsModalLabel">Table Details</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeTableModal()">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div id="tableInfo">
                            <!-- Table information will be loaded here -->
                        </div>
                        
                        <!-- Tabs for different actions -->
                        <ul class="nav nav-tabs mt-3" id="tableActionTabs" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="reservation-tab" data-toggle="tab" href="#reservation" role="tab">Make Reservation</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="server-tab" data-toggle="tab" href="#server" role="tab">Assign Server</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="current-reservation-tab" data-toggle="tab" href="#current-reservation" role="tab">Current Reservation</a>
                            </li>
                        </ul>
                        
                        <div class="tab-content mt-3" id="tableActionTabsContent">
                            <!-- Make Reservation Tab -->
                            <div class="tab-pane fade show active" id="reservation" role="tabpanel">
                                <form id="makeReservationForm">
                                    <div class="form-group">
                                        <label for="customerName">Customer Name</label>
                                        <input type="text" class="form-control" id="customerName" name="name" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="customerEmail">Customer Email</label>
                                        <input type="email" class="form-control" id="customerEmail" name="email">
                                    </div>
                                    <div class="form-group">
                                        <label for="customerPhone">Customer Phone</label>
                                        <input type="tel" class="form-control" id="customerPhone" name="phone">
                                    </div>
                                    <div class="form-group">
                                        <label for="partySize">Party Size</label>
                                        <input type="number" class="form-control" id="partySize" name="partySize" min="1" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="reservationDate">Date</label>
                                        <input type="date" class="form-control" id="reservationDate" name="date" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="timeSlot">Time Slot</label>
                                        <select class="form-control" id="timeSlot" name="slotId" required>
                                            <option value="">Select time slot</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="specialRequests">Special Requests</label>
                                        <textarea class="form-control" id="specialRequests" name="specialRequests" rows="2"></textarea>
                                    </div>
                                    <button type="submit" class="btn btn-primary">Make Reservation</button>
                                </form>
                            </div>
                            
                            <!-- Assign Server Tab -->
                            <div class="tab-pane fade" id="server" role="tabpanel">
                                <div id="serversList">
                                    <!-- Servers will be loaded here -->
                                </div>
                            </div>
                            
                            <!-- Current Reservation Tab -->
                            <div class="tab-pane fade" id="current-reservation" role="tabpanel">
                                <div id="currentReservationInfo">
                                    <!-- Current reservation info will be loaded here -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="sidenav-overlay"></div>
        <div class="drag-target"></div>

        <!-- Store reservations data for JavaScript -->
        <div id="reservations-data" data-reservations="<%= JSON.stringify(reservations || []) %>" style="display: none;"></div>
        <!-- Helper scripts for new features -->
        <script>
            function formatTime(timeString) {
                return new Date(timeString).toLocaleTimeString('en-US', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
            }
            function changePage(newPage) {
                currentPage = newPage;
                renderReservationsList(reservationsData);
            }
            function retryLoadFloorPlan(floorPlanId) {
                loadFloorPlan(floorPlanId);
            }
            function setupTableClickListeners() {
                document.querySelectorAll('.reservation-row').forEach(row => {
                    row.addEventListener('click', function() {
                        const tableId = this.dataset.tableId;
                        if (tableId) {
                            selectTable(tableId);
                        }
                    });
                });
            }
        </script>

        <!-- footer partial -->
        <%- include('../partials/footer.ejs') %>

        <!-- scripts partial -->
        <%- include('../partials/scripts-without-pace.ejs') %>
        
        <!-- Availability JavaScript files FIRST -->
        <script src="/public/js/pages/availability.js"></script>
        <script src="/public/js/pages/availability/floorPlanApi.js"></script>
        <script src="/public/js/pages/availability/tableApi.js"></script>
        <script src="/public/js/pages/availability/ui.js"></script>
        <script src="/public/js/pages/availability/canvas.js"></script>
        
        <!-- Reservations specific JavaScript LAST -->
        <script src="/public/js/pages/reservations/reservations.js"></script>
        
        <script>
            const currentUser = '<%= currentUser.user_type %>';
        </script>
        <!-- Integration Script -->
        <script>
            let selectedTable = null;

            document.addEventListener('DOMContentLoaded', function() {
                // Keep track of currently expanded section
                let currentlyExpandedSection = 'reservations'; // Default expanded section

                // Function to collapse all sections except the specified one
                function collapseAllExcept(exceptSectionId) {
                    document.querySelectorAll('.section-content').forEach(section => {
                        if (section.id !== `${exceptSectionId}-section`) {
                            // Collapse section
                            section.classList.remove('expanded');
                            section.style.display = 'none';
                            
                            // Update the corresponding button icon
                            const button = document.querySelector(`[data-section="${section.id.replace('-section', '')}"]`);
                            if (button) {
                                const icon = button.querySelector('i');
                                icon.classList.remove('la-angle-up');
                                icon.classList.add('la-angle-down');
                            }
                        }
                    });
                }

                // Setup section toggle functionality
                document.querySelectorAll('.section-toggle-btn').forEach(button => {
                    button.addEventListener('click', function() {
                        const sectionId = this.getAttribute('data-section');
                        const sectionContent = document.getElementById(`${sectionId}-section`);
                        const icon = this.querySelector('i');
                        
                        if (currentlyExpandedSection === sectionId) {
                            // Clicking on already expanded section - collapse it
                            sectionContent.classList.remove('expanded');
                            sectionContent.style.display = 'none';
                            icon.classList.remove('la-angle-up');
                            icon.classList.add('la-angle-down');
                            currentlyExpandedSection = null;
                        } else {
                            // Collapse all other sections
                            collapseAllExcept(sectionId);
                            
                            // Expand clicked section
                            sectionContent.style.display = 'block';
                            sectionContent.classList.add('expanded');
                            icon.classList.remove('la-angle-down');
                            icon.classList.add('la-angle-up');
                            currentlyExpandedSection = sectionId;
                        }
                    });
                });

                // Initialize the Reservations section as expanded by default
                const reservationsSection = document.getElementById('reservations-section');
                if (reservationsSection) {
                    reservationsSection.classList.add('expanded');
                    reservationsSection.style.display = 'block';
                    // Ensure all other sections are collapsed
                    collapseAllExcept('reservations');
                }

                // Get restaurantId from URL
                const urlParams = new URLSearchParams(window.location.search);
                const restaurantId = urlParams.get('restaurantId');
                
                if (!restaurantId) {
                    console.error('Restaurant ID not found in URL');
                    return;
                }

                // Load data for different sections
                loadSeatedReservations(restaurantId);
                loadWaitlist(restaurantId);
                loadServers(restaurantId);
                loadFinishedReservations(restaurantId);
                loadRemovedReservations(restaurantId);

                // Initialize floor plan selector
                const floorSelector = document.getElementById('floorPlanSelector');
                if (!floorSelector) return;

                // Use FloorPlanApi to fetch floor plans
                window.FloorPlanApi.fetchFloorPlans(restaurantId)
                    .then(floorPlans => {
                        // Clear loading option
                        floorSelector.innerHTML = '';
                        
                        if (floorPlans.length === 0) {
                            const option = document.createElement('option');
                            option.value = '';
                            option.textContent = 'No floor plans available';
                            option.disabled = true;
                            option.selected = true;
                            floorSelector.appendChild(option);
                            return;
                        }

                        // Add floor plans to selector
                        floorPlans.forEach(plan => {
                            const option = document.createElement('option');
                            option.value = plan._id;
                            option.textContent = plan.name;
                            floorSelector.appendChild(option);
                        });

                        // Select first floor plan by default
                        if (floorPlans.length > 0) {
                            floorSelector.value = floorPlans[0]._id;
                            // Load tables for this floor plan
                            loadFloorPlan(floorPlans[0]._id);
                        }

                        // Add change event listener
                        floorSelector.addEventListener('change', function() {
                            loadFloorPlan(this.value);
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching floor plans:', error);
                        floorSelector.innerHTML = '<option value="" disabled selected>Error loading floor plans</option>';
                    });

                // Setup table click handlers using event delegation
                document.addEventListener('click', function(e) {
                    if (e.target.classList.contains('ap-dropped-table')) {
                        e.preventDefault();
                        e.stopPropagation();
                        const tableId = e.target.dataset.id;
                        const serverId = e.target.dataset.serverId;
                        console.log('Table clicked:', tableId, serverId);
                        showTableDetailsModal(tableId, serverId);
                    }
                });
            });

            async function loadSeatedReservations(restaurantId) {
                try {
                    const response = await fetch(`/reservations/${restaurantId}?status=seated&isJSON=true`);
                    const data = await response.json();
                    const seatedList = document.getElementById('seated-list');
                    
                    if (data.success && data.reservations && data.reservations.length > 0) {
                        seatedList.innerHTML = data.reservations.map(reservation => `
                            <div class="reservation-row" data-reservation-id="${reservation._id}">
                                <div class="col table-name">${reservation.tableId ? (reservation.tableId.name || reservation.tableId.tableId) : 'Unknown Table'}</div>
                                <div class="col seats">${reservation.tableId ? reservation.tableId.seats : 'N/A'}</div>
                                <div class="col time">${new Date(reservation.startTime).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</div>
                                <div class="col customer">${reservation.metadata && reservation.metadata.name ? reservation.metadata.name : 'Guest'}</div>
                            </div>
                        `).join('');
                    } else {
                        seatedList.innerHTML = `
                            <div class="no-data">
                                <i class="la la-chair"></i>
                                <h4>No Seated Guests</h4>
                                <p>No guests are currently seated.</p>
                            </div>
                        `;
                    }
                } catch (error) {
                    console.error('Error loading seated reservations:', error);
                }
            }

            async function loadWaitlist(restaurantId) {
                try {
                    const response = await fetch(`/waitlist/${restaurantId}?isJSON=true`);
                    const data = await response.json();
                    const waitlistList = document.getElementById('waitlist-list');
                    
                    if (data.success && data.waitlist && data.waitlist.length > 0) {
                        waitlistList.innerHTML = data.waitlist.map(waitlistItem => `
                            <div class="reservation-row" data-waitlist-id="${waitlistItem._id}">
                                <div class="col table-name">Waiting</div>
                                <div class="col seats">${waitlistItem.partySize || 'N/A'}</div>
                                <div class="col time">${new Date(waitlistItem.createdAt).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</div>
                                <div class="col customer">${waitlistItem.name || 'Guest'}</div>
                            </div>
                        `).join('');
                    } else {
                        waitlistList.innerHTML = `
                            <div class="no-data">
                                <i class="la la-clock"></i>
                                <h4>No Waitlisted Guests</h4>
                                <p>No guests are currently on the waitlist.</p>
                            </div>
                        `;
                    }
                } catch (error) {
                    console.error('Error loading waitlist:', error);
                }
            }

            async function loadServers(restaurantId) {
                try {
                    const response = await fetch(`/servers/${restaurantId}?isJSON=true`);
                    const data = await response.json();
                    const serversList = document.getElementById('servers-list');
                    
                    if (data.success && data.servers && data.servers.length > 0) {
                        serversList.innerHTML = data.servers.map(server => `
                            <div class="reservation-row" data-server-id="${server._id}">
                                <div class="col table-name">Server</div>
                                <div class="col seats">-</div>
                                <div class="col time">${server.shift ? 'On Shift' : 'Off Shift'}</div>
                                <div class="col customer">${server.name || 'Server'}</div>
                            </div>
                        `).join('');
                    } else {
                        serversList.innerHTML = `
                            <div class="no-data">
                                <i class="la la-user"></i>
                                <h4>No Active Servers</h4>
                                <p>No servers are currently assigned.</p>
                            </div>
                        `;
                    }
                } catch (error) {
                    console.error('Error loading servers:', error);
                }
            }

            async function loadFinishedReservations(restaurantId) {
                try {
                    const response = await fetch(`/reservations/${restaurantId}?status=finished&isJSON=true`);
                    const data = await response.json();
                    const finishedList = document.getElementById('finished-list');
                    
                    if (data.success && data.reservations && data.reservations.length > 0) {
                        finishedList.innerHTML = data.reservations.map(reservation => `
                            <div class="reservation-row" data-reservation-id="${reservation._id}">
                                <div class="col table-name">${reservation.tableId ? (reservation.tableId.name || reservation.tableId.tableId) : 'Unknown Table'}</div>
                                <div class="col seats">${reservation.tableId ? reservation.tableId.seats : 'N/A'}</div>
                                <div class="col time">${new Date(reservation.startTime).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</div>
                                <div class="col customer">${reservation.metadata && reservation.metadata.name ? reservation.metadata.name : 'Guest'}</div>
                            </div>
                        `).join('');
                    } else {
                        finishedList.innerHTML = `
                            <div class="no-data">
                                <i class="la la-check-circle"></i>
                                <h4>No Finished Reservations</h4>
                                <p>No reservations have been completed today.</p>
                            </div>
                        `;
                    }
                } catch (error) {
                    console.error('Error loading finished reservations:', error);
                }
            }

            async function loadRemovedReservations(restaurantId) {
                try {
                    const response = await fetch(`/reservations/${restaurantId}?status=removed&isJSON=true`);
                    const data = await response.json();
                    const removedList = document.getElementById('removed-list');
                    
                    if (data.success && data.reservations && data.reservations.length > 0) {
                        removedList.innerHTML = data.reservations.map(reservation => `
                            <div class="reservation-row" data-reservation-id="${reservation._id}">
                                <div class="col table-name">${reservation.tableId ? (reservation.tableId.name || reservation.tableId.tableId) : 'Unknown Table'}</div>
                                <div class="col seats">${reservation.tableId ? reservation.tableId.seats : 'N/A'}</div>
                                <div class="col time">${new Date(reservation.startTime).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</div>
                                <div class="col customer">${reservation.metadata && reservation.metadata.name ? reservation.metadata.name : 'Guest'}</div>
                            </div>
                        `).join('');
                    } else {
                        removedList.innerHTML = `
                            <div class="no-data">
                                <i class="la la-times-circle"></i>
                                <h4>No Removed Reservations</h4>
                                <p>No reservations have been cancelled today.</p>
                            </div>
                        `;
                    }
                } catch (error) {
                    console.error('Error loading removed reservations:', error);
                }
            }

            async function loadFloorPlan(floorPlanId) {
                if (!floorPlanId) return;

                try {
                    // Clear existing tables from canvas
                    const canvasContent = document.getElementById('ap-canvasContent');
                    if (canvasContent) {
                        canvasContent.innerHTML = '<div class="ap-drop-zone" id="ap-dropZone"><div class="ap-drop-message">Drop table here to add to floor plan</div></div>';
                    }

                    // Use TableApi to fetch tables
                    const tables = await window.TableApi.fetchTablesForFloorPlan(floorPlanId);
                    tables.forEach(table => {
                        renderTableOnCanvas(table);
                    });
                } catch (error) {
                    console.error('Error loading floor plan:', error);
                }
            }

            function renderTableOnCanvas(table) {
                const canvasContent = document.getElementById('ap-canvasContent');
                if (!canvasContent) return;

                const droppedTable = document.createElement('div');
                droppedTable.className = `ap-dropped-table ${table.isReserved ? 'reserved' : ''}`;
                droppedTable.textContent = table.name || table.tableId;
                droppedTable.dataset.seats = table.seats;
                droppedTable.dataset.type = table.tableType;
                droppedTable.dataset.id = table.tableId;
                droppedTable.dataset.serverId = table._id;
                droppedTable.style.cursor = 'pointer';

                // Set position
                droppedTable.style.left = `${table.position?.x || 0}px`;
                droppedTable.style.top = `${table.position?.y || 0}px`;

                // Set size and shape based on table type and seats
                setTableStyle(droppedTable, table.tableType, table.seats);

                canvasContent.appendChild(droppedTable);
            }

            function setTableStyle(table, type, seats) {
                switch (type) {
                    case 'round':
                        table.style.borderRadius = '50%';
                        table.style.width = seats <= 4 ? '50px' : seats <= 8 ? '60px' : '80px';
                        table.style.height = table.style.width;
                        break;
                    case 'square':
                        table.style.borderRadius = '4px';
                        table.style.width = seats <= 4 ? '50px' : '60px';
                        table.style.height = table.style.width;
                        break;
                    case 'rectangular':
                        table.style.borderRadius = '4px';
                        table.style.width = seats <= 4 ? '80px' : seats <= 8 ? '120px' : '140px';
                        table.style.height = seats <= 4 ? '40px' : seats <= 8 ? '60px' : '70px';
                        break;
                    case 'hexagon':
                        table.style.width = '50px';
                        table.style.height = '50px';
                        table.style.clipPath = 'polygon(30% 0%, 70% 0%, 100% 50%, 70% 100%, 30% 100%, 0% 50%)';
                        break;
                    case 'bar':
                        table.style.width = '100px';
                        table.style.height = '30px';
                        table.style.borderRadius = '15px';
                        break;
                }
            }

            async function showTableDetailsModal(tableId, serverId) {
                selectedTable = { tableId, serverId };
                console.log('Opening modal for table:', selectedTable);

                try {
                    // Get table details
                    const tableResponse = await fetch(`/tables/${serverId}?isJSON=true`);
                    let tableData = await tableResponse.json();

                    // If first request fails, try alternative endpoint
                    if (!tableData.success) {
                        const altResponse = await fetch(`/tables/table/${serverId}?isJSON=true`);
                        tableData = await altResponse.json();
                    }

                    if (!tableData.success) {
                        console.error('Error fetching table details:', tableData.message);
                        alert('Error loading table details');
                        return;
                    }

                    const table = tableData.table;

                    // Populate table info
                    const tableInfo = document.getElementById('tableInfo');
                    if (tableInfo) {
                        tableInfo.innerHTML = `
                            <div class="table-details">
                                <h6>Table: ${table.name || table.tableId}</h6>
                                <p><strong>Seats:</strong> ${table.seats}</p>
                                <p><strong>Type:</strong> ${table.tableType}</p>
                                <p><strong>Status:</strong> ${table.isReserved ? 'Reserved' : 'Available'}</p>
                            </div>
                        `;
                    }

                    // Load time slots for reservation
                    await loadTimeSlots();

                    // Load servers for assignment
                    await loadServersForAssignment();

                    // Load current reservation if table is reserved
                    if (table.isReserved) {
                        await loadCurrentReservation(tableId);
                    }

                    // Show modal
                    const modal = document.getElementById('tableDetailsModal');
                    if (modal) {
                        modal.style.display = 'block';
                        modal.classList.add('show');
                        document.body.classList.add('modal-open');
                        
                        // Create backdrop if it doesn't exist
                        if (!document.querySelector('.modal-backdrop')) {
                            const backdrop = document.createElement('div');
                            backdrop.className = 'modal-backdrop fade show';
                            document.body.appendChild(backdrop);
                        }
                    }

                } catch (error) {
                    console.error('Error showing table details:', error);
                    alert('Error loading table details');
                }
            }

            async function loadTimeSlots() {
                const urlParams = new URLSearchParams(window.location.search);
                const restaurantId = urlParams.get('restaurantId');
                const reservationDateInput = document.getElementById('reservationDate');
                const partySizeInput = document.getElementById('partySize');

                // Set default values
                if (reservationDateInput && !reservationDateInput.value) {
                    reservationDateInput.value = new Date().toISOString().split('T')[0];
                }

                const date = reservationDateInput ? reservationDateInput.value : new Date().toISOString().split('T')[0];
                const partySize = partySizeInput ? partySizeInput.value || 2 : 2;

                try {
                    const response = await fetch(`/timeslots/${restaurantId}?isJSON=true`);
                    const data = await response.json();

                    const timeSlotSelect = document.getElementById('timeSlot');
                    if (timeSlotSelect && data.success && data.timeSlots) {
                        timeSlotSelect.innerHTML = '<option value="">Select time slot</option>';
                        
                        data.timeSlots.forEach(slot => {
                            const option = document.createElement('option');
                            option.value = slot._id;
                            option.textContent = `${slot.startTime} - ${slot.endTime}`;
                            timeSlotSelect.appendChild(option);
                        });
                    }
                } catch (error) {
                    console.error('Error loading time slots:', error);
                }
            }

            async function loadServersForAssignment() {
                const urlParams = new URLSearchParams(window.location.search);
                const restaurantId = urlParams.get('restaurantId');

                try {
                    const response = await fetch(`/servers/${restaurantId}?isJSON=true`);
                    const data = await response.json();

                    const serversList = document.getElementById('serversList');
                    if (serversList && data.success && data.servers) {
                        serversList.innerHTML = data.servers.map(server => `
                            <div class="server-item">
                                <label>
                                    <input type="radio" name="assignedServer" value="${server._id}">
                                    ${server.name || 'Server'} - ${server.shift ? 'On Shift' : 'Off Shift'}
                                </label>
                            </div>
                        `).join('');
                    }
                } catch (error) {
                    console.error('Error loading servers:', error);
                }
            }

            async function loadCurrentReservation(tableId) {
                const urlParams = new URLSearchParams(window.location.search);
                const restaurantId = urlParams.get('restaurantId');

                try {
                    const response = await fetch(`/reservations/${restaurantId}?tableId=${tableId}&isJSON=true`);
                    const data = await response.json();

                    const currentReservationInfo = document.getElementById('currentReservationInfo');
                    if (currentReservationInfo) {
                        if (data.success && data.reservations && data.reservations.length > 0) {
                            const reservation = data.reservations[0];
                            currentReservationInfo.innerHTML = `
                                <div class="current-reservation">
                                    <h6>Current Reservation</h6>
                                    <p><strong>Customer:</strong> ${reservation.metadata?.name || 'Guest'}</p>
                                    <p><strong>Email:</strong> ${reservation.metadata?.email || 'N/A'}</p>
                                    <p><strong>Phone:</strong> ${reservation.metadata?.phone || 'N/A'}</p>
                                    <p><strong>Party Size:</strong> ${reservation.partySize}</p>
                                    <p><strong>Time:</strong> ${new Date(reservation.startTime).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })} - ${new Date(reservation.endTime).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</p>
                                    <p><strong>Status:</strong> ${reservation.status}</p>
                                </div>
                            `;
                        } else {
                            currentReservationInfo.innerHTML = '<p>No current reservation found.</p>';
                        }
                    }
                } catch (error) {
                    console.error('Error loading current reservation:', error);
                }
            }

            function closeTableModal() {
                const modal = document.getElementById('tableDetailsModal');
                if (modal) {
                    modal.style.display = 'none';
                    modal.classList.remove('show');
                    document.body.classList.remove('modal-open');
                    
                    // Remove backdrop
                    const backdrop = document.querySelector('.modal-backdrop');
                    if (backdrop) {
                        backdrop.remove();
                    }
                }
                selectedTable = null;
            }

            // Setup form submission for making reservations
            document.getElementById('makeReservationForm')?.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                if (!selectedTable) {
                    alert('No table selected');
                    return;
                }

                const formData = new FormData(this);
                const urlParams = new URLSearchParams(window.location.search);
                const restaurantId = urlParams.get('restaurantId');

                const reservationData = {
                    tableId: selectedTable.serverId,
                    restaurantId: restaurantId,
                    name: formData.get('name'),
                    email: formData.get('email'),
                    phone: formData.get('phone'),
                    partySize: parseInt(formData.get('partySize')),
                    date: formData.get('date'),
                    slotId: formData.get('slotId'),
                    specialRequests: formData.get('specialRequests')
                };

                try {
                    const response = await fetch(`/reservations`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(reservationData)
                    });

                    const result = await response.json();
                    
                    if (result.success) {
                        alert('Reservation created successfully!');
                        closeTableModal();
                        // Reload the page to refresh data
                        window.location.reload();
                    } else {
                        alert('Error creating reservation: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error creating reservation:', error);
                    alert('Error creating reservation');
                }
            });
        </script>
</body>
<!-- END: Body-->

</html>